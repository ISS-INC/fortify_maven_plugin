<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<meta http-equiv="content-type" content="text/html; charset=ISO-8859-1" />
<title>FileHelperTest xref</title>
<link type="text/css" rel="stylesheet" href="../../../../../../stylesheet.css" />
</head>
<body>
<pre>

<a name="1" href="#1">1</a>   <strong class="jxr_keyword">package</strong> com.fortify.ps.maven.plugin.sca;
<a name="2" href="#2">2</a>   
<a name="3" href="#3">3</a>   <strong class="jxr_keyword">import</strong> java.io.*;
<a name="4" href="#4">4</a>   <strong class="jxr_keyword">import</strong> java.util.*;
<a name="5" href="#5">5</a>   <strong class="jxr_keyword">import</strong> java.util.zip.*;
<a name="6" href="#6">6</a>   
<a name="7" href="#7">7</a>   <strong class="jxr_keyword">import</strong> org.junit.Test;
<a name="8" href="#8">8</a>   
<a name="9" href="#9">9</a>   <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">class</strong> <a href="../../../../../../com/fortify/ps/maven/plugin/sca/FileHelperTest.html">FileHelperTest</a> {
<a name="10" href="#10">10</a>      @Test
<a name="11" href="#11">11</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testFileCopy() <strong class="jxr_keyword">throws</strong> IOException {
<a name="12" href="#12">12</a>          File src = FileHelper.makeFreshFile(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"file-copy"</span>, <span class="jxr_string">"src.txt"</span>);
<a name="13" href="#13">13</a>          assert src.exists() : <span class="jxr_string">"Failed to create source file, "</span> + src.getAbsolutePath() + <span class="jxr_string">"."</span>;
<a name="14" href="#14">14</a>          File dest = FileHelper.nonExistentFile(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"file-copy"</span>, <span class="jxr_string">"dest.txt"</span>);
<a name="15" href="#15">15</a>          assert !dest.exists() : <span class="jxr_string">"Destination file already exists and could not be deleted."</span>;
<a name="16" href="#16">16</a>          <strong class="jxr_keyword">boolean</strong> success = FileHelper.copyFile(src, dest);
<a name="17" href="#17">17</a>          assert success : <span class="jxr_string">"Copying did not succeed perfectly."</span>;
<a name="18" href="#18">18</a>          assert dest.exists() : <span class="jxr_string">"Copying did not succeed."</span>;
<a name="19" href="#19">19</a>      }
<a name="20" href="#20">20</a>  
<a name="21" href="#21">21</a>      @Test
<a name="22" href="#22">22</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testCopyIntoDirectory() <strong class="jxr_keyword">throws</strong> IOException {
<a name="23" href="#23">23</a>          File src = FileHelper.makeFreshFile(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"copy-into-dir"</span>, <span class="jxr_string">"src.txt"</span>);
<a name="24" href="#24">24</a>          File destFolder = FileHelper.getOrCreateDirectory(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"copy-into-dir"</span>, <span class="jxr_string">"destination"</span>);
<a name="25" href="#25">25</a>          assert destFolder.isDirectory() : <span class="jxr_string">"Destination folder could not be created or already exists as a file."</span>;
<a name="26" href="#26">26</a>          File dest = <strong class="jxr_keyword">new</strong> File(destFolder, src.getName());
<a name="27" href="#27">27</a>  
<a name="28" href="#28">28</a>          FileHelper.copyFile(src, destFolder);
<a name="29" href="#29">29</a>          assert dest.exists() : <span class="jxr_string">"Copy into directory failed."</span>;
<a name="30" href="#30">30</a>      }
<a name="31" href="#31">31</a>  
<a name="32" href="#32">32</a>      @Test
<a name="33" href="#33">33</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testDirectoryCopy() <strong class="jxr_keyword">throws</strong> IOException {
<a name="34" href="#34">34</a>          File srcFolder = <strong class="jxr_keyword">new</strong> File(FileHelper.getPathString(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"dir-copy"</span>, <span class="jxr_string">"sources"</span>));
<a name="35" href="#35">35</a>          srcFolder.mkdirs();
<a name="36" href="#36">36</a>          assert srcFolder.isDirectory() : <span class="jxr_string">"Could not create source directory."</span>;
<a name="37" href="#37">37</a>          File src1 = FileHelper.makeFreshFile(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"dir-copy"</span>, <span class="jxr_string">"sources"</span>, <span class="jxr_string">"src1.txt"</span>);
<a name="38" href="#38">38</a>          FileHelper.appendTextAsAnotherLine(src1, <span class="jxr_string">"Fortify "</span>);
<a name="39" href="#39">39</a>          File src2 = FileHelper.makeFreshFile(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"dir-copy"</span>, <span class="jxr_string">"sources"</span>, <span class="jxr_string">"src2.txt"</span>);
<a name="40" href="#40">40</a>          FileHelper.appendTextAsAnotherLine(src2, <span class="jxr_string">"Software"</span>);
<a name="41" href="#41">41</a>          assert src1.exists() &amp;&amp; src2.exists() : <span class="jxr_string">"Could not create source files."</span>;
<a name="42" href="#42">42</a>          srcFolder = <strong class="jxr_keyword">new</strong> File(FileHelper.getPathString(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"dir-copy"</span>, <span class="jxr_string">"sources"</span>));
<a name="43" href="#43">43</a>          File destFolder = <strong class="jxr_keyword">new</strong> File(FileHelper.getPathString(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"dir-copy"</span>, <span class="jxr_string">"destination"</span>));
<a name="44" href="#44">44</a>          FileHelper.delete(destFolder);
<a name="45" href="#45">45</a>          destFolder.mkdirs();
<a name="46" href="#46">46</a>          assert destFolder.isDirectory() : <span class="jxr_string">"Could not create destination folder."</span>;
<a name="47" href="#47">47</a>          File dest = <strong class="jxr_keyword">new</strong> File(destFolder, srcFolder.getName());
<a name="48" href="#48">48</a>          <strong class="jxr_keyword">boolean</strong> success = FileHelper.copy(srcFolder, destFolder);
<a name="49" href="#49">49</a>          assert dest.isDirectory() : <span class="jxr_string">"Folder was not copied."</span>;
<a name="50" href="#50">50</a>          assert success : <span class="jxr_string">"Copying did not work completely."</span>;
<a name="51" href="#51">51</a>          File[] dirContents = dest.listFiles();
<a name="52" href="#52">52</a>          assert dirContents.length == 2 : <span class="jxr_string">"Did not find source files inside destination folder."</span>;
<a name="53" href="#53">53</a>          String str = <span class="jxr_string">""</span>;
<a name="54" href="#54">54</a>          File destSrc1 = <strong class="jxr_keyword">new</strong> File(FileHelper.getPathString(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"dir-copy"</span>, <span class="jxr_string">"destination"</span>, <span class="jxr_string">"sources"</span>, <span class="jxr_string">"src1.txt"</span>));
<a name="55" href="#55">55</a>          str += FileHelper.readFirstLine(destSrc1);
<a name="56" href="#56">56</a>          File destSrc2 = <strong class="jxr_keyword">new</strong> File(FileHelper.getPathString(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"dir-copy"</span>, <span class="jxr_string">"destination"</span>, <span class="jxr_string">"sources"</span>, <span class="jxr_string">"src2.txt"</span>));
<a name="57" href="#57">57</a>          str += FileHelper.readFirstLine(destSrc2);
<a name="58" href="#58">58</a>          assert str.equals(<span class="jxr_string">"Fortify Software"</span>) : <span class="jxr_string">"File contents were corrupted: "</span> + str;
<a name="59" href="#59">59</a>      }
<a name="60" href="#60">60</a>  
<a name="61" href="#61">61</a>      @Test
<a name="62" href="#62">62</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testZipTester() <strong class="jxr_keyword">throws</strong> IOException {
<a name="63" href="#63">63</a>          File notAZip = FileHelper.makeFreshFile(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"zip-tester"</span>, <span class="jxr_string">"notazip.txt"</span>);
<a name="64" href="#64">64</a>          assert notAZip.exists() : <span class="jxr_string">"Could not create 'notazip.txt'."</span>;
<a name="65" href="#65">65</a>          assert !FileHelper.isZipArchive(notAZip) : <span class="jxr_string">"Misidentified a text file as a ZIP archive."</span>;
<a name="66" href="#66">66</a>  
<a name="67" href="#67">67</a>          File aZipArchive = <strong class="jxr_keyword">null</strong>;
<a name="68" href="#68">68</a>          ZipOutputStream zos = <strong class="jxr_keyword">null</strong>;
<a name="69" href="#69">69</a>          PrintWriter writer = <strong class="jxr_keyword">null</strong>;
<a name="70" href="#70">70</a>          <strong class="jxr_keyword">try</strong> {
<a name="71" href="#71">71</a>              aZipArchive = FileHelper.makeFreshFile(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"zip-tester"</span>, <span class="jxr_string">"isazip.zip"</span>);
<a name="72" href="#72">72</a>              zos = <strong class="jxr_keyword">new</strong> ZipOutputStream(<strong class="jxr_keyword">new</strong> BufferedOutputStream(<strong class="jxr_keyword">new</strong> FileOutputStream(aZipArchive)));
<a name="73" href="#73">73</a>              zos.putNextEntry(<strong class="jxr_keyword">new</strong> ZipEntry(<span class="jxr_string">"readme.txt"</span>));
<a name="74" href="#74">74</a>              writer = <strong class="jxr_keyword">new</strong> PrintWriter(zos);
<a name="75" href="#75">75</a>              writer.println(<span class="jxr_string">"Hello, world!"</span>);
<a name="76" href="#76">76</a>              writer.flush();
<a name="77" href="#77">77</a>          } <strong class="jxr_keyword">finally</strong> {
<a name="78" href="#78">78</a>              FileHelper.closeQuietly(zos);
<a name="79" href="#79">79</a>          }
<a name="80" href="#80">80</a>          assert FileHelper.isZipArchive(aZipArchive) : <span class="jxr_string">"Did not identify a ZIP archive."</span>;
<a name="81" href="#81">81</a>      }
<a name="82" href="#82">82</a>  
<a name="83" href="#83">83</a>      @Test
<a name="84" href="#84">84</a>      <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testZipExtraction() <strong class="jxr_keyword">throws</strong> IOException {
<a name="85" href="#85">85</a>          File zip = <strong class="jxr_keyword">null</strong>;
<a name="86" href="#86">86</a>          PrintWriter writer = <strong class="jxr_keyword">null</strong>;
<a name="87" href="#87">87</a>          ZipOutputStream zos = <strong class="jxr_keyword">null</strong>;
<a name="88" href="#88">88</a>  
<a name="89" href="#89">89</a>          <strong class="jxr_keyword">try</strong> {
<a name="90" href="#90">90</a>              zip = FileHelper.makeFreshFile(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"zip-extraction"</span>, <span class="jxr_string">"isazip.zip"</span>);
<a name="91" href="#91">91</a>              zos = <strong class="jxr_keyword">new</strong> ZipOutputStream(<strong class="jxr_keyword">new</strong> BufferedOutputStream(<strong class="jxr_keyword">new</strong> FileOutputStream(zip)));
<a name="92" href="#92">92</a>              writer = <strong class="jxr_keyword">new</strong> PrintWriter(zos);
<a name="93" href="#93">93</a>              zos.putNextEntry(<strong class="jxr_keyword">new</strong> ZipEntry(<span class="jxr_string">"readme.txt"</span>));
<a name="94" href="#94">94</a>              writer.println(<span class="jxr_string">"Hello, world!"</span>);
<a name="95" href="#95">95</a>              writer.flush();
<a name="96" href="#96">96</a>          } <strong class="jxr_keyword">finally</strong> {
<a name="97" href="#97">97</a>              FileHelper.closeQuietly(zos);
<a name="98" href="#98">98</a>          }
<a name="99" href="#99">99</a>  
<a name="100" href="#100">100</a>         File destFolder = <strong class="jxr_keyword">null</strong>;
<a name="101" href="#101">101</a>         assert FileHelper.isZipArchive(zip) : <span class="jxr_string">"Could not create a valid ZIP archive."</span>;
<a name="102" href="#102">102</a>         destFolder = FileHelper.getOrCreateDirectory(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"zip-extraction"</span>, <span class="jxr_string">"output"</span>);
<a name="103" href="#103">103</a>         assert destFolder.isDirectory() : <span class="jxr_string">"Could not create folder to extract to."</span>;
<a name="104" href="#104">104</a>         File[] initialContents = destFolder.listFiles();
<a name="105" href="#105">105</a>         <strong class="jxr_keyword">for</strong> (File f : initialContents) {
<a name="106" href="#106">106</a>             f.delete();
<a name="107" href="#107">107</a>         }
<a name="108" href="#108">108</a>         initialContents = destFolder.listFiles();
<a name="109" href="#109">109</a>         assert initialContents.length == 0 : <span class="jxr_string">"Folder is not empty."</span>;
<a name="110" href="#110">110</a>         FileHelper.extractZipArchive(zip, destFolder);
<a name="111" href="#111">111</a>         File[] files = destFolder.listFiles();
<a name="112" href="#112">112</a>         assert files.length &gt; 0 : <span class="jxr_string">"Nothing was extracted."</span>;
<a name="113" href="#113">113</a>         String fileContents = FileHelper.readFirstLine(files[0]);
<a name="114" href="#114">114</a>         assert fileContents != <strong class="jxr_keyword">null</strong> &amp;&amp; fileContents.equals(<span class="jxr_string">"Hello, world!"</span>) : <span class="jxr_string">"File extraction was not correct."</span>;
<a name="115" href="#115">115</a>     }
<a name="116" href="#116">116</a> 
<a name="117" href="#117">117</a>     @Test
<a name="118" href="#118">118</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testDirectoryDelete() <strong class="jxr_keyword">throws</strong> IOException {
<a name="119" href="#119">119</a>         File dir = FileHelper.getOrCreateDirectory(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"dir-delete"</span>, <span class="jxr_string">"foo"</span>);
<a name="120" href="#120">120</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 10; i++) {
<a name="121" href="#121">121</a>             File f = <strong class="jxr_keyword">new</strong> File(dir, <span class="jxr_string">"foo_"</span> + i + <span class="jxr_string">".txt"</span>);
<a name="122" href="#122">122</a>             f.createNewFile();
<a name="123" href="#123">123</a>         }
<a name="124" href="#124">124</a>         File subdir = <strong class="jxr_keyword">new</strong> File(dir, <span class="jxr_string">"bar"</span>);
<a name="125" href="#125">125</a>         subdir.mkdirs();
<a name="126" href="#126">126</a>         <strong class="jxr_keyword">for</strong> (<strong class="jxr_keyword">int</strong> i = 0; i &lt; 10; i++) {
<a name="127" href="#127">127</a>             File f = <strong class="jxr_keyword">new</strong> File(subdir, <span class="jxr_string">"bar_"</span> + i + <span class="jxr_string">".txt"</span>);
<a name="128" href="#128">128</a>             f.createNewFile();
<a name="129" href="#129">129</a>         }
<a name="130" href="#130">130</a>         File[] topLevelContents = dir.listFiles();
<a name="131" href="#131">131</a>         assert dir.listFiles().length == 11 : <span class="jxr_string">"Error while populating top-level test directory.."</span>;
<a name="132" href="#132">132</a>         assert subdir.listFiles().length == 10 : <span class="jxr_string">"Error while populating sub-directory."</span>;
<a name="133" href="#133">133</a>         FileHelper.delete(dir);
<a name="134" href="#134">134</a>         assert !dir.exists() : <span class="jxr_string">"Unable to delete top-level directory."</span>;
<a name="135" href="#135">135</a>     }
<a name="136" href="#136">136</a> 
<a name="137" href="#137">137</a>     <em class="jxr_comment">// Source: http://download.oracle.com/javaee/5/tutorial/doc/bnagy.html#bnagz</em>
<a name="138" href="#138">138</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> String EXAMPLE_JSP_1 = <span class="jxr_string">"&lt;%@ page contentType=\&quot;text/html; charset=UTF-8\&quot; %&gt;\n"</span> +
<a name="139" href="#139">139</a>             <span class="jxr_string">"&lt;%@ taglib uri=\&quot;http://java.sun.com/jsp/jstl/core\n"</span> +
<a name="140" href="#140">140</a>             <span class="jxr_string">"\&quot;\n"</span> +
<a name="141" href="#141">141</a>             <span class="jxr_string">"         prefix=\&quot;c\&quot; %&gt;\n"</span> +
<a name="142" href="#142">142</a>             <span class="jxr_string">"&lt;%@ taglib uri=\&quot;/functions\&quot; prefix=\&quot;f\&quot; %&gt;\n"</span> +
<a name="143" href="#143">143</a>             <span class="jxr_string">"&lt;html&gt;\n"</span> +
<a name="144" href="#144">144</a>             <span class="jxr_string">"&lt;head&gt;&lt;title&gt;Localized Dates&lt;/title&gt;&lt;/head&gt;\n"</span> +
<a name="145" href="#145">145</a>             <span class="jxr_string">"&lt;body bgcolor=\&quot;white\&quot;&gt;\n"</span> +
<a name="146" href="#146">146</a>             <span class="jxr_string">"&lt;jsp:useBean id=\&quot;locales\&quot; scope=\&quot;application\&quot;\n"</span> +
<a name="147" href="#147">147</a>             <span class="jxr_string">"    class=\&quot;mypkg.MyLocales\&quot;/&gt;\n"</span> +
<a name="148" href="#148">148</a>             <span class="jxr_string">"\n"</span> +
<a name="149" href="#149">149</a>             <span class="jxr_string">"&lt;form name=\&quot;localeForm\&quot; action=\&quot;index.jsp\&quot; method=\&quot;post\&quot;&gt;\n"</span> +
<a name="150" href="#150">150</a>             <span class="jxr_string">"&lt;c:set var=\&quot;selectedLocaleString\&quot; value=\&quot;${param.locale}\&quot; /&gt;\n"</span> +
<a name="151" href="#151">151</a>             <span class="jxr_string">"&lt;c:set var=\&quot;selectedFlag\&quot;\n"</span> +
<a name="152" href="#152">152</a>             <span class="jxr_string">"     value=\&quot;${!empty selectedLocaleString}\&quot; /&gt;\n"</span> +
<a name="153" href="#153">153</a>             <span class="jxr_string">"&lt;b&gt;Locale:&lt;/b&gt;\n"</span> +
<a name="154" href="#154">154</a>             <span class="jxr_string">"&lt;select name=locale&gt;\n"</span> +
<a name="155" href="#155">155</a>             <span class="jxr_string">"&lt;c:forEach var=\&quot;localeString\&quot; items=\&quot;${locales.localeNames}\&quot; &gt;\n"</span> +
<a name="156" href="#156">156</a>             <span class="jxr_string">"&lt;c:choose&gt;\n"</span> +
<a name="157" href="#157">157</a>             <span class="jxr_string">"    &lt;c:when test=\&quot;${selectedFlag}\&quot;&gt;\n"</span> +
<a name="158" href="#158">158</a>             <span class="jxr_string">"        &lt;c:choose&gt;\n"</span> +
<a name="159" href="#159">159</a>             <span class="jxr_string">"            &lt;c:when\n"</span> +
<a name="160" href="#160">160</a>             <span class="jxr_string">"                 test=\&quot;${f:equals(selectedLocaleString, localeString)}\&quot; &gt;\n"</span> +
<a name="161" href="#161">161</a>             <span class="jxr_string">"                &lt;option selected&gt;${localeString}&lt;/option&gt;\n"</span> +
<a name="162" href="#162">162</a>             <span class="jxr_string">"            &lt;/c:when&gt;\n"</span> +
<a name="163" href="#163">163</a>             <span class="jxr_string">"            &lt;c:otherwise&gt;\n"</span> +
<a name="164" href="#164">164</a>             <span class="jxr_string">"                &lt;option&gt;${localeString}&lt;/option&gt;\n"</span> +
<a name="165" href="#165">165</a>             <span class="jxr_string">"            &lt;/c:otherwise&gt;\n"</span> +
<a name="166" href="#166">166</a>             <span class="jxr_string">"        &lt;/c:choose&gt;\n"</span> +
<a name="167" href="#167">167</a>             <span class="jxr_string">"    &lt;/c:when&gt;\n"</span> +
<a name="168" href="#168">168</a>             <span class="jxr_string">"    &lt;c:otherwise&gt;\n"</span> +
<a name="169" href="#169">169</a>             <span class="jxr_string">"        &lt;option&gt;${localeString}&lt;/option&gt;\n"</span> +
<a name="170" href="#170">170</a>             <span class="jxr_string">"    &lt;/c:otherwise&gt;\n"</span> +
<a name="171" href="#171">171</a>             <span class="jxr_string">"&lt;/c:choose&gt;\n"</span> +
<a name="172" href="#172">172</a>             <span class="jxr_string">"&lt;/c:forEach&gt;\n"</span> +
<a name="173" href="#173">173</a>             <span class="jxr_string">"&lt;/select&gt;\n"</span> +
<a name="174" href="#174">174</a>             <span class="jxr_string">"&lt;input type=\&quot;submit\&quot; name=\&quot;Submit\&quot; value=\&quot;Get Date\&quot;&gt;\n"</span> +
<a name="175" href="#175">175</a>             <span class="jxr_string">"&lt;/form&gt;\n"</span> +
<a name="176" href="#176">176</a>             <span class="jxr_string">"\n"</span> +
<a name="177" href="#177">177</a>             <span class="jxr_string">"&lt;c:if test=\&quot;${selectedFlag}\&quot; &gt;\n"</span> +
<a name="178" href="#178">178</a>             <span class="jxr_string">"    &lt;jsp:setProperty name=\&quot;locales\&quot;\n"</span> +
<a name="179" href="#179">179</a>             <span class="jxr_string">"        property=\&quot;selectedLocaleString\&quot;\n"</span> +
<a name="180" href="#180">180</a>             <span class="jxr_string">"        value=\&quot;${selectedLocaleString}\&quot; /&gt;\n"</span> +
<a name="181" href="#181">181</a>             <span class="jxr_string">"    &lt;jsp:useBean id=\&quot;date\&quot; class=\&quot;mypkg.MyDate\&quot;/&gt;\n"</span> +
<a name="182" href="#182">182</a>             <span class="jxr_string">"    &lt;jsp:setProperty name=\&quot;date\&quot; property=\&quot;locale\&quot;\n"</span> +
<a name="183" href="#183">183</a>             <span class="jxr_string">"        value=\&quot;${locales.selectedLocale}\&quot;/&gt;\n"</span> +
<a name="184" href="#184">184</a>             <span class="jxr_string">"    &lt;b&gt;Date: &lt;/b&gt;${date.date}&lt;/c:if&gt;\n"</span> +
<a name="185" href="#185">185</a>             <span class="jxr_string">"&lt;/body&gt;\n"</span> +
<a name="186" href="#186">186</a>             <span class="jxr_string">"&lt;/html&gt;"</span>;
<a name="187" href="#187">187</a> 
<a name="188" href="#188">188</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">static</strong> <strong class="jxr_keyword">final</strong> String EXAMPLE_JSP_2 = <span class="jxr_string">"&lt;html&gt;&lt;body&gt;Fortify Software&lt;/body&gt;&lt;/html&gt;"</span>;
<a name="189" href="#189">189</a> 
<a name="190" href="#190">190</a>     @Test
<a name="191" href="#191">191</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testZipArchiveExplosion() <strong class="jxr_keyword">throws</strong> IOException {
<a name="192" href="#192">192</a>         File war = <strong class="jxr_keyword">null</strong>;
<a name="193" href="#193">193</a>         PrintWriter writer = <strong class="jxr_keyword">null</strong>;
<a name="194" href="#194">194</a>         ZipOutputStream zos = <strong class="jxr_keyword">null</strong>;
<a name="195" href="#195">195</a>         <strong class="jxr_keyword">try</strong> {
<a name="196" href="#196">196</a>             String warPath = FileHelper.getPathString(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"zip-explode"</span>, <span class="jxr_string">"mywebapp.war"</span>);
<a name="197" href="#197">197</a>             Map&lt;String, String&gt; warEntries = <strong class="jxr_keyword">new</strong> HashMap&lt;String, String&gt;();
<a name="198" href="#198">198</a>             warEntries.put(<span class="jxr_string">"foo.jsp"</span>, EXAMPLE_JSP_1);
<a name="199" href="#199">199</a>             warEntries.put(<span class="jxr_string">"bar.jsp"</span>, EXAMPLE_JSP_2);
<a name="200" href="#200">200</a>             war = FileHelper.createZipArchive(warPath, warEntries);
<a name="201" href="#201">201</a>             assert FileHelper.isZipArchive(war) : <span class="jxr_string">"WAR creation not successful."</span>;
<a name="202" href="#202">202</a>             <strong class="jxr_keyword">boolean</strong> success = FileHelper.explodeZipArchive(war);
<a name="203" href="#203">203</a>             <em class="jxr_comment">//assert success;</em>
<a name="204" href="#204">204</a>             assert war.isDirectory() : <span class="jxr_string">"Did not explode WAR at all."</span>;
<a name="205" href="#205">205</a>             File[] contents = war.listFiles();
<a name="206" href="#206">206</a>             assert contents.length == 2 : <span class="jxr_string">"Did not explode WAR successfully"</span>;
<a name="207" href="#207">207</a>         } <strong class="jxr_keyword">finally</strong> {
<a name="208" href="#208">208</a>             FileHelper.closeQuietly(zos);
<a name="209" href="#209">209</a>         }
<a name="210" href="#210">210</a>     }
<a name="211" href="#211">211</a> 
<a name="212" href="#212">212</a>     @Test
<a name="213" href="#213">213</a>     <strong class="jxr_keyword">public</strong> <strong class="jxr_keyword">void</strong> testWebAppExplosion() <strong class="jxr_keyword">throws</strong> IOException {
<a name="214" href="#214">214</a>         Map&lt;String, String&gt; entries = <strong class="jxr_keyword">new</strong> HashMap&lt;String, String&gt;();
<a name="215" href="#215">215</a>         entries.put(<span class="jxr_string">"foo.jsp"</span>, EXAMPLE_JSP_1);
<a name="216" href="#216">216</a>         entries.put(<span class="jxr_string">"bar.jsp"</span>, EXAMPLE_JSP_2);
<a name="217" href="#217">217</a>         File war_1 = FileHelper.createZipArchive(FileHelper.getPathString(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"webapp-explode"</span>, <span class="jxr_string">"war1.war"</span>), entries);
<a name="218" href="#218">218</a>         File war_2 = FileHelper.createZipArchive(FileHelper.getPathString(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"webapp-explode"</span>, <span class="jxr_string">"war2.war"</span>), entries);
<a name="219" href="#219">219</a>         File ear = FileHelper.createZipArchive(FileHelper.getPathString(<span class="jxr_string">"target"</span>, <span class="jxr_string">"test"</span>, <span class="jxr_string">"webapp-explode"</span>, <span class="jxr_string">"myenterpriseapp.ear"</span>), war_1, war_2);
<a name="220" href="#220">220</a>         assert FileHelper.isZipArchive(ear) : <span class="jxr_string">"Not a ZIP archive."</span>;
<a name="221" href="#221">221</a>         <strong class="jxr_keyword">boolean</strong> success = FileHelper.explodeWebApp(ear);
<a name="222" href="#222">222</a>         <strong class="jxr_keyword">if</strong> (ear.isDirectory()) {
<a name="223" href="#223">223</a>             File war = ear.listFiles()[0];
<a name="224" href="#224">224</a>             <strong class="jxr_keyword">if</strong> (war.isDirectory()) {
<a name="225" href="#225">225</a>                 assert war.listFiles().length == 2;
<a name="226" href="#226">226</a>                 <strong class="jxr_keyword">return</strong>;
<a name="227" href="#227">227</a>             }
<a name="228" href="#228">228</a>         }
<a name="229" href="#229">229</a>         assert false;
<a name="230" href="#230">230</a>     }
<a name="231" href="#231">231</a> }
</pre>
<hr/><div id="footer">This page was automatically generated by <a href="http://maven.apache.org/">Maven</a></div></body>
</html>

